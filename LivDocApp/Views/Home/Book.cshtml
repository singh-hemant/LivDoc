@model LivDocApp.Models.BookViewModel

@{
    ViewData["Title"] = "Book";
    
}

    <style>
       
        .container2 {
            display: grid;
            grid-template-columns: 4fr 1fr; /* Three columns */
            gap: 20px;
            padding: 20px;
        }

        .column ul {
            list-style-type: none; /* Remove dot marks */
            padding: 0; /* Remove default padding */
            margin: 0; /* Remove default margin */
            text-align:left center;
            color:#0c5d69;
            font-size: 20px;

            .column img {
                max-width: 100%;
                height: auto;
            }

        .column ul li {
            margin-bottom: 25px; /* Add bottom margin between list items */
            font-weight: bolder;
        }
       
    </style>

<h3>Doctor's Details</h3>
<hr />
<div class="container2">
   
    <div class="justify-content-around">
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Doctor.Name)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Name)
        </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Hospital.Location.City)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Hospital.Location.City)
            </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Experience)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Experience)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Specialty)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Specialty.Name)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Hospital)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Hospital.Name)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Email)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Email)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.PhoneNumber)
        </dd>   

    </dl>
    </div>

    <div>
    <img src="@Model.Doctor.DocImgURL" alt="Profile Pic" style="max-width: 100%; max-height: 100%;" />

    </div>
    
</div>


<br />
<br />
<br />


   
    <style>
        .calendar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

            .calendar button {
            background-color: lightseagreen;
                color: #fff;
                border: none;
                padding: 10px 15px;
                border-radius: 5px;
                cursor: pointer;
            }

        .time-slots {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            grid-gap: 10px;
        }

        .time-slot {
            background-color: lightseagreen;
            color: #fff;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
  
        <div class="container">
            <h3>Book an Appointment</h3>
            <hr />
            <div class="calendar">
        <!-- Buttons to shift date left or right -->

        <button onclick="shiftDate(-1)">&lt;</button>
        
        <input type="date" id="dateInput" value="@DateTime.Now.ToString("yyyy-MM-dd")" min="@DateTime.Now.ToString("yyyy-MM-dd")" max="@DateTime.Now.AddMonths(3).ToString("yyyy-MM-dd")" class="calender" >
     
        <button onclick="shiftDate(1)">&gt;</button>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
       
           
            </div>    
    </div>

<br />
<br />
<br /> </hr>
<br />


<div class="time-slots" id="timeSlotsContainer">
</div>
<br />
<br />
<br />

<div>
    <h5><a asp-action="Search" asp-controller="Home">Back to List of Doctors</a></h5>
</div>

<hr />


<script>
    // Event delegation to handle click event for dynamically generated buttons
    $(document).on('click', '.time-slot', function () {
        var buttonValue = parseInt($(this).val());
        console.log(buttonValue);
        var buttonText = $(this).text();
        // Display confirmation popup
        var confirmation = confirm("Are you sure you want to book the time slot at " + buttonText + "?");

        // If user confirms, send POST request to "BookTimeSlots" action
        if (confirmation) {
            var selectedDate = $('#dateInput').val(); // Get the selected date
            $.ajax({
                url: '@Url.Action("BookTimeSlot", "Home")', // URL of the controller action
                type: 'POST',
                data: { id: docID, date: selectedDate, timeSlot: buttonValue, tsText: buttonText }, // Data to send to the controller action
                success: function (data) {
                    // Handle success response
                    alert(" booked successfully");
                    location.reload();
                },
                error: function (xhr, status, error) {
                    // Handle error response
                    console.error(error);
                    alert(" booking Failed. Try Again!!");

                }
            });
        }
        else {
            location.reload();

        }

    });


    var selectedDate = $('#dateInput').val();

    // Function to handle date selection change
    $('#dateInput').change(function () {
        //location.reload();

        selectedDate = $(this).val(); // Get the selected date
        sendDataToController(selectedDate); // Send data to controller
    });
    var docID = @Model.Doctor.DoctorID;

    // Function to send data to controller via AJAX
    function sendDataToController(selectedDate) {


        $.ajax({
            url: '@Url.Action("BookAppointment", "Home")', // URL of the controller action
            type: 'GET',
            data: { id: docID, date: selectedDate }, // Data to send to the controller action
            success: function (data) {
                //$('#dateInput').val(data.SelectedDate);
                console.log(data)
                var timeSlots = data.TimeSlots;
                var appointments = data.Appointments;
                var timeSlotsContainer = $('#timeSlotsContainer');
                timeSlotsContainer.empty(); // Clear existing buttons
                let i = 0;
                appointments.forEach(function (appointment) {
                    if (appointment != null) {
                        var button = $('<button></button>', {
                            class: 'time-slot btn btn-secondary',
                            value: appointment.TimeSlot,
                            title: "available",
                            id: 'timeSlotButton_' + appointment.TimeSlot,
                            text: timeSlots[i]
                        });

                        if (appointment.Status) {
                            button.prop('disabled', true);
                            button.attr('title', 'Not available');
                            
                        }

                        timeSlotsContainer.append(button);

                    } else {
                        var invalidButton = $('<button></button>', {
                            class: 'time-slot',
                            disabled: true,
                            text: 'Invalid Time Slot'
                        });
                        timeSlotsContainer.append(invalidButton);
                    }
                    i++;
                });
            },
            error: function (xhr, status, error) {
                console.error(error);
            }
        });

    }

    // Call the function to update button properties
    sendDataToController(selectedDate);

    function shiftDate(days) {
        var dateInput = document.getElementById('dateInput');
        var currentDate = new Date(dateInput.value);

        // Calculate the new date by adding the specified number of days
        var newDate = new Date(currentDate.getTime() + days * 24 * 60 * 60 * 1000);

        // Check if the new date is within the allowed range
        var minDate = new Date(dateInput.min);
        var maxDate = new Date(dateInput.max);
        if (newDate < minDate || newDate > maxDate) {
            console.log("Date out of range");
        } else {
            // Set the new date value in the input field
            dateInput.value = newDate.toISOString().slice(0, 10);
        }

        // Call the function to send data to the controller (assuming this function is defined elsewhere)
        sendDataToController(dateInput.value);
    }
 
</script>
