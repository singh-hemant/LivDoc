@model LivDocApp.Models.BookViewModel

@{
    ViewData["Title"] = "Book";
    var serializedData = Json.Serialize(Model.Appointments);
    
}

<h1>Doctor's Details</h1>

<div>
    <h4>Doctor</h4>
    <hr />
    <div class="justify-content-around">
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Doctor.Name)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Name)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Experience)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Experience)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Specialty)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Specialty.Name)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Hospital)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Hospital.Name)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.Email)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.Email)
        </dd>
        <dt class = "col-sm-2">
                @Html.DisplayNameFor(model => model.Doctor.PhoneNumber)
        </dt>
        <dd class = "col-sm-10">
                @Html.DisplayFor(model => model.Doctor.PhoneNumber)
        </dd>
    </dl>
    </div>
    <div class="justify-content-around">
        <img src="@Model.Doctor.DocImgURL" alt="Profile Pic" style="max-width: 200px; max-height: 500px;" />
    </div>

</div>

<hr />


   
    <style>
      

        .container {
            max-width: 600px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
        }

        .calendar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

            .calendar button {
                background-color: #007bff;
                color: #fff;
                border: none;
                padding: 10px 15px;
                border-radius: 5px;
                cursor: pointer;
            }

        .time-slots {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            grid-gap: 10px;
        }

        .time-slot {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
  
        <div class="container">
            <h1>Book an Appointment</h1>
            <div class="calendar">
        <!-- Buttons to shift date left or right -->

        <button onclick="shiftDate(-1)">&lt;</button>
        <input type="date" id="dateInput" value="@DateTime.Now.ToString("yyyy-MM-dd")" min="@DateTime.Now.ToString("yyyy-MM-dd")" max="@DateTime.Now.AddMonths(3).ToString("yyyy-MM-dd")" onchange="updateButtonProperties();" />
        <button onclick="shiftDate(1)">&gt;</button>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script>
            
            // Function to handle date selection change
            $('#dateInput').change(function () {
                var selectedDate = $(this).val(); // Get the selected date
                sendDataToController(selectedDate); // Send data to controller
            });

            // Function to send data to controller via AJAX
            function sendDataToController(selectedDate) {
                $.ajax({
                    url: '@Url.Action("Book", "Home")', // URL of the controller action
                    type: 'POST',
                    data: { id: @Model.Doctor.DoctorID, date: selectedDate }, // Data to send to the controller action
                    success: function (response) {
                        // Handle response from the server if needed
                        //console.log(response);
                 
                    },
                    error: function (xhr, status, error) {
                        // Handle error if needed
                        console.error(error);
                    }
                });
            }

            function shiftDate(days) {
                var dateInput = document.getElementById('dateInput');
                var currentDate = new Date(dateInput.value);
                currentDate.setDate(currentDate.getDate() + days);
                dateInput.value = currentDate.toISOString().slice(0, 10); // Set new date value
            }
            function updateButtonStates() {
                var appointmentValues = [];
                Model.Appointments.forEach(function (appointment) {
                    appointmentValues.push(appointment);
                });

                console.log(appointmentValues);

            }
        </script>
           
            </div>
    <div class="time-slots" id="timeSlotsContainer">
     
    </div>

    <script>
       

        // Function to update button properties based on appointment status
        function updateButtonProperties() {
         
            var timeSlots = @Json.Serialize(Model.TimeSlots);
            var appointments = @Html.Raw(serializedData);
            console.log(appointments)
            var timeSlotsContainer = document.getElementById('timeSlotsContainer');
            timeSlotsContainer.innerHTML = ''; // Clear existing buttons
            let i = 0;
            appointments.forEach(function (appointment) {
                
                if (appointment != null) {
                    var button = document.createElement('button');
                    button.classList.add('time-slot');
                    button.value = appointment.timeSlot;
                    button.id = 'timeSlotButton_' + appointment.TimeSlot;
                    button.textContent = timeSlots[i];

                    if (appointment.status) {
                        button.classList.add('btn', 'btn-secondary');
                        button.disabled = true;
                    }

                    timeSlotsContainer.appendChild(button);
                   
                } else {
                    var invalidButton = document.createElement('button');
                    invalidButton.classList.add('time-slot');
                    invalidButton.disabled = true;
                    invalidButton.textContent = 'Invalid Time Slot';
                    timeSlotsContainer.appendChild(invalidButton);
                }
                i++;
            });
        }

        // Call the function to update button properties
        updateButtonProperties(@Json.Serialize(Model.Appointments));
        

       </script>
        
    </div>
 


<div>
    <a asp-action="Index">Back to List of Doctors</a>
</div>
